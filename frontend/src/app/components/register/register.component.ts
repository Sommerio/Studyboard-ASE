import { Component, OnInit } from '@angular/core';
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import {AuthService} from '../../services/auth.service';
import {Router} from '@angular/router';
import {UserService} from '../../services/user.service';
import {User} from '../../dtos/user';
import {MatSnackBar} from '@angular/material/snack-bar';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent implements OnInit {

  // Error flag
  error: boolean = false;
  errorMessage: string = '';
  registerForm: FormGroup;
  // After first submission attempt, form validation will start
  submitted: boolean = false;


  constructor(private userService: UserService, private formBuilder: FormBuilder, private authService: AuthService,
              private router: Router, private snackBar: MatSnackBar) {
    this.registerForm = this.formBuilder.group({
      username: ['', [Validators.required]],
      email: ['', [Validators.required]],
      password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('.*[0-9].*')]],
    });
  }

  ngOnInit(): void {
  }

  registerUser() {
    this.submitted = true;
    if (this.registerForm.valid && (this.registerForm.controls.username.value !== 'user')) {
      const user: User = new User(
        1,      // this id is ignored in the backend because it is autogenerated
        this.registerForm.controls.username.value,
        this.registerForm.controls.password.value,
        this.registerForm.controls.email.value,
        0
      );
      this.createUser(user);
      // this.clearUserForm();
    } else {
      if (this.registerForm.controls.username.errors?.required) {
        this.openSnackbar('Username is required!', 'warning-snackbar');
      }
      if (this.registerForm.controls.password.errors?.required) {
        this.openSnackbar('Password is required!', 'warning-snackbar');
      }
      if (this.registerForm.controls.username.value === 'user') {
        this.openSnackbar('user is a reserved username!', 'warning-snackbar');
      }
      if (this.registerForm.controls.email.errors?.required) {
        this.openSnackbar('Email is required!', 'warning-snackbar');
      }
      if (this.registerForm.controls.password.errors?.minlength) {
        this.openSnackbar('Password must be at least 8 characters long!', 'warning-snackbar');
      }
      if (this.registerForm.controls.password.errors?.pattern) {
        this.openSnackbar('Password must have at least one digit!', 'warning-snackbar');
      }
      console.log('Invalid input');
    }
  }

  /**
   * Sends user creation request
   * @param user the user which should be created
   */
  createUser(user: User) {
    this.userService.createUser(user).subscribe(
      () => {
        this.openSnackbar('Registration successful!', 'success-snackbar');
        this.navigateToLogin();
      },
      error => {
        this.defaultErrorHandling(error);
      }
    );
  }

  navigateToLogin() {
    this.router.navigate(['/login']).then(
      () => {
        //
      });
  }

  private defaultErrorHandling(error: any) {
    console.log(error);
    this.error = true;
    this.errorMessage = '';
    this.errorMessage = error.error.message;
  }

  // private clearUserForm() {
  //   this.registerForm.reset();
  //   this.submitted = false;
  // }

  openSnackbar(message: string, type: string) {
    this.snackBar.open(message, 'close', {
      duration: 4000,
      panelClass: [type]
    });
  }

  /**
   * Error flag will be deactivated, which clears the error message
   */
  vanishError() {
    this.error = false;
  }
}
